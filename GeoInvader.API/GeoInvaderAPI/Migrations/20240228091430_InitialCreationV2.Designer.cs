// <auto-generated />
using GeoInvaderAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeoInvaderAPI.Migrations
{
    [DbContext(typeof(GeoInvaderDataContext))]
    [Migration("20240228091430_InitialCreationV2")]
    partial class InitialCreationV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<int>("GameID")
                        .HasColumnType("integer");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GameID");

                    b.ToTable("Form");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Form");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameID"));

                    b.Property<int>("CurrentScore")
                        .HasColumnType("integer");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<int>("HighScores")
                        .HasColumnType("integer");

                    b.HasKey("GameID");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Cercle", b =>
                {
                    b.HasBaseType("GeoInvaderAPI.Models.Core.Form");

                    b.HasDiscriminator().HasValue("Cercle");
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Rectangle", b =>
                {
                    b.HasBaseType("GeoInvaderAPI.Models.Core.Form");

                    b.HasDiscriminator().HasValue("Rectangle");
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Triangle", b =>
                {
                    b.HasBaseType("GeoInvaderAPI.Models.Core.Form");

                    b.HasDiscriminator().HasValue("Triangle");
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Form", b =>
                {
                    b.HasOne("GeoInvaderAPI.Models.Core.Game", "Game")
                        .WithMany("Forms")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GeoInvaderAPI.Models.Core.Game", b =>
                {
                    b.Navigation("Forms");
                });
#pragma warning restore 612, 618
        }
    }
}
